{"version":3,"file":"plugins.js","sources":["../src/constants.ts","../src/plugins.ts"],"sourcesContent":["const PLUGIN_NAME = \"cp-visual-regression-diff\";\nexport const LINK_PREFIX = `#${PLUGIN_NAME}-`;\nexport const OVERLAY_CLASS = `${PLUGIN_NAME}-overlay`;\nexport const IMAGE_SNAPSHOT_PREFIX = `__${PLUGIN_NAME}_snapshots__`;\n\nexport enum FILE_SUFFIX {\n  diff = \".diff\",\n  actual = \".actual\",\n}\n\nexport const TASK = {\n  getScreenshotPath: `${PLUGIN_NAME}-getScreenshotPath`,\n  compareImages: `${PLUGIN_NAME}-compareImages`,\n  approveImage: `${PLUGIN_NAME}-approveImage`,\n  doesFileExist: `${PLUGIN_NAME}-doesFileExist`,\n};\n","import path from \"path\";\nimport pixelmatch from \"pixelmatch\";\nimport fs from \"fs\";\nimport { PNG } from \"pngjs\";\nimport { FILE_SUFFIX, IMAGE_SNAPSHOT_PREFIX, TASK } from \"./constants\";\nimport moveFile from \"move-file\";\n\ntype NotFalsy<T> = T extends false | null | undefined ? never : T;\n\nconst createImageResizer = (width: number, height: number) => (source: PNG) => {\n  const resized = new PNG({ width, height, fill: true });\n  PNG.bitblt(source, resized, 0, 0, source.width, source.height, 0, 0);\n  return resized;\n};\n\nconst fillSizeDifference = (width: number, height: number) => (image: PNG) => {\n  const inArea = (x: number, y: number) => y > height || x > width;\n  for (let y = 0; y < image.height; y++) {\n    for (let x = 0; x < image.width; x++) {\n      if (inArea(x, y)) {\n        const idx = (image.width * y + x) << 2;\n        image.data[idx] = 0;\n        image.data[idx + 1] = 0;\n        image.data[idx + 2] = 0;\n        image.data[idx + 3] = 64;\n      }\n    }\n  }\n  return image;\n};\n\nconst alignImagesToSameSize = (firstImage: PNG, secondImage: PNG) => {\n  const firstImageWidth = firstImage.width;\n  const firstImageHeight = firstImage.height;\n  const secondImageWidth = secondImage.width;\n  const secondImageHeight = secondImage.height;\n\n  const resizeToSameSize = createImageResizer(\n    Math.max(firstImageWidth, secondImageWidth),\n    Math.max(firstImageHeight, secondImageHeight)\n  );\n\n  const resizedFirst = resizeToSameSize(firstImage);\n  const resizedSecond = resizeToSameSize(secondImage);\n\n  return [\n    fillSizeDifference(firstImageWidth, firstImageHeight)(resizedFirst),\n    fillSizeDifference(secondImageWidth, secondImageHeight)(resizedSecond),\n  ];\n};\n\nconst getConfigVariableOrThrow = <K extends keyof Cypress.PluginConfigOptions>(\n  config: Cypress.PluginConfigOptions,\n  name: K\n) => {\n  if (config[name])\n    return config[name] as NotFalsy<Cypress.PluginConfigOptions[K]>;\n\n  throw `[Image snapshot] CypressConfig.${name} cannot be missing or \\`false\\`!`;\n};\n\nexport const initPlugin = (\n  on: Cypress.PluginEvents,\n  config: Cypress.PluginConfigOptions\n) => {\n  on(\"task\", {\n    [TASK.getScreenshotPath]({ title, imagesDir, specPath }) {\n      return path.join(\n        IMAGE_SNAPSHOT_PREFIX,\n        path.dirname(specPath),\n        ...imagesDir.split(\"/\"),\n        `${title}${FILE_SUFFIX.actual}.png`\n      );\n    },\n    [TASK.doesFileExist]({ path }) {\n      return fs.existsSync(path);\n    },\n    [TASK.approveImage]({ img }) {\n      const oldImg = img.replace(FILE_SUFFIX.actual, \"\");\n      if (fs.existsSync(oldImg)) fs.unlinkSync(oldImg);\n\n      const diffImg = img.replace(FILE_SUFFIX.actual, FILE_SUFFIX.diff);\n      if (fs.existsSync(diffImg)) fs.unlinkSync(diffImg);\n\n      if (fs.existsSync(img)) moveFile.sync(img, oldImg);\n\n      return null;\n    },\n    [TASK.compareImages](\n      cfg: {\n        title: string;\n        imgNew: string;\n        imgOld: string;\n        updateImages: boolean;\n        maxDiffThreshold: number;\n        diffConfig: Parameters<typeof pixelmatch>[5];\n      } & Parameters<typeof pixelmatch>[5]\n    ) {\n      let imgDiff: number | undefined;\n      let errorMsg: string | undefined;\n\n      if (fs.existsSync(cfg.imgOld) && !cfg.updateImages) {\n        const rawImgNew = PNG.sync.read(fs.readFileSync(cfg.imgNew));\n        const rawImgOld = PNG.sync.read(fs.readFileSync(cfg.imgOld));\n        const isImgSizeDifferent =\n          rawImgNew.height !== rawImgOld.height ||\n          rawImgNew.width !== rawImgOld.width;\n\n        const [imgNew, imgOld] = isImgSizeDifferent\n          ? alignImagesToSameSize(rawImgNew, rawImgOld)\n          : [rawImgNew, rawImgOld];\n\n        const { width, height } = imgNew;\n        const diff = new PNG({ width, height });\n        const diffConfig = Object.assign({ includeAA: true }, cfg.diffConfig);\n\n        const diffPixels = pixelmatch(\n          imgNew.data,\n          imgOld.data,\n          diff.data,\n          width,\n          height,\n          diffConfig\n        );\n        imgDiff = (diffPixels / width) * height;\n\n        if (isImgSizeDifferent) {\n          errorMsg = `Images size mismatch - new screenshot is ${rawImgNew.width}px by ${rawImgNew.height}px while old one is ${rawImgOld.width}px by ${rawImgOld.height} (width x height).`;\n        } else if (imgDiff > cfg.maxDiffThreshold) {\n          const roundedImgDiff = Math.ceil(imgDiff * 1000) / 1000;\n          errorMsg = `Image diff factor (${roundedImgDiff}) is bigger than maximum threshold option ${cfg.maxDiffThreshold}`;\n        }\n\n        if (errorMsg) {\n          fs.writeFileSync(\n            cfg.imgNew.replace(FILE_SUFFIX.actual, FILE_SUFFIX.diff),\n            PNG.sync.write(diff)\n          );\n          return {\n            error: true,\n            message: errorMsg,\n            imgDiff,\n            maxDiffThreshold: cfg.maxDiffThreshold,\n          };\n        }\n\n        fs.unlinkSync(cfg.imgOld);\n      } else {\n        // there is no \"old screenshot\" or screenshots should be immediately updated\n        imgDiff = 0;\n      }\n\n      moveFile.sync(cfg.imgNew, cfg.imgOld);\n\n      if (typeof imgDiff !== \"undefined\") {\n        const roundedImgDiff = Math.ceil(imgDiff * 1000) / 1000;\n        return {\n          message: `Image diff (${roundedImgDiff}%) is within boundaries of maximum threshold option ${cfg.maxDiffThreshold}`,\n          imgDiff,\n          maxDiffThreshold: cfg.maxDiffThreshold,\n        };\n      }\n\n      return null;\n    },\n  });\n\n  on(\"after:screenshot\", (details) => {\n    if (details.name?.indexOf(IMAGE_SNAPSHOT_PREFIX) !== 0) return;\n\n    return new Promise((resolve, reject) => {\n      const screenshotsFolder = getConfigVariableOrThrow(\n        config,\n        \"screenshotsFolder\"\n      );\n\n      const newRelativePath = details.name.substring(\n        IMAGE_SNAPSHOT_PREFIX.length + path.sep.length\n      );\n      const newAbsolutePath = path.normalize(\n        path.join(config.projectRoot, newRelativePath)\n      );\n\n      void moveFile(details.path, newAbsolutePath)\n        .then(() => {\n          fs.rm(\n            path.join(screenshotsFolder, IMAGE_SNAPSHOT_PREFIX),\n            { recursive: true, force: true },\n            (err) => {\n              if (err) return reject(err);\n\n              resolve({ path: newAbsolutePath });\n            }\n          );\n        })\n        .catch(reject);\n    });\n  });\n};\n"],"names":["FILE_SUFFIX","IMAGE_SNAPSHOT_PREFIX","fillSizeDifference","width","height","image","inArea","x","y","idx","data","on","config","PLUGIN_NAME","title","imagesDir","path","join","dirname","specPath","split","actual","fs","existsSync","img","oldImg","replace","unlinkSync","diffImg","diff","moveFile","sync","cfg","imgDiff","errorMsg","imgOld","updateImages","rawImgNew","PNG","read","readFileSync","imgNew","rawImgOld","isImgSizeDifferent","firstImage","secondImage","firstImageWidth","firstImageHeight","secondImageWidth","secondImageHeight","resizeToSameSize","Math","max","source","resized","fill","bitblt","resizedFirst","resizedSecond","alignImagesToSameSize","diffConfig","Object","assign","includeAA","pixelmatch","maxDiffThreshold","ceil","writeFileSync","write","error","message","details","name","indexOf","Promise","resolve","reject","screenshotsFolder","getConfigVariableOrThrow","newRelativePath","substring","length","sep","newAbsolutePath","normalize","projectRoot","then","rm","recursive","force","err"],"mappings":"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"}
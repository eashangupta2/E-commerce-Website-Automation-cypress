{"version":3,"file":"support.js","sources":["../src/constants.ts","../src/commands.ts","../src/support.ts"],"sourcesContent":["const PLUGIN_NAME = \"cp-visual-regression-diff\";\nexport const LINK_PREFIX = `#${PLUGIN_NAME}-`;\nexport const OVERLAY_CLASS = `${PLUGIN_NAME}-overlay`;\nexport const IMAGE_SNAPSHOT_PREFIX = `__${PLUGIN_NAME}_snapshots__`;\n\nexport enum FILE_SUFFIX {\n  diff = \".diff\",\n  actual = \".actual\",\n}\n\nexport const TASK = {\n  getScreenshotPath: `${PLUGIN_NAME}-getScreenshotPath`,\n  compareImages: `${PLUGIN_NAME}-compareImages`,\n  approveImage: `${PLUGIN_NAME}-approveImage`,\n  doesFileExist: `${PLUGIN_NAME}-doesFileExist`,\n};\n","import { FILE_SUFFIX, LINK_PREFIX, TASK } from \"./constants\";\nimport type pixelmatch from \"pixelmatch\";\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace Cypress {\n    type MatchImageOptions = {\n      screenshotConfig?: Partial<Cypress.ScreenshotDefaultsOptions>;\n      diffConfig?: Parameters<typeof pixelmatch>[5];\n      updateImages?: boolean;\n      imagesDir?: string;\n      maxDiffThreshold?: number;\n    };\n\n    interface Chainable {\n      /**\n       * Command to create and compare image snapshots.\n       * @memberof Cypress.Chainable\n       * @example cy.get('.my-element').matchImage();\n       */\n      matchImage<T extends Chainable<unknown>>(\n        this: T,\n        options?: Cypress.MatchImageOptions\n      ): T;\n    }\n  }\n}\n\nconst nameCacheCounter: Record<string, number> = {};\n\nCypress.Commands.add(\n  \"matchImage\",\n  { prevSubject: \"optional\" },\n  (subject?: JQuery<HTMLElement>, options: Cypress.MatchImageOptions = {}) => {\n    let title = Cypress.currentTest.titlePath.join(\" \");\n    if (typeof nameCacheCounter[title] === \"undefined\")\n      nameCacheCounter[title] = -1;\n    title += ` #${++nameCacheCounter[title]}`;\n\n    const updateImages =\n      options.updateImages ||\n      (Cypress.env(\"pluginVisualRegressionUpdateImages\") as\n        | boolean\n        | undefined) ||\n      false;\n    const imagesDir =\n      options.imagesDir ||\n      (Cypress.env(\"pluginVisualRegressionImagesDir\") as string | undefined) ||\n      \"__image_snapshots__\";\n\n    const maxDiffThreshold =\n      options.maxDiffThreshold ||\n      (Cypress.env(\"pluginVisualRegressionMaxDiffThreshold\") as\n        | number\n        | undefined) ||\n      0.01;\n    const diffConfig =\n      options.diffConfig ||\n      (Cypress.env(\"pluginVisualRegressionDiffConfig\") as\n        | Parameters<typeof pixelmatch>[5]\n        | undefined) ||\n      {};\n    const screenshotConfig =\n      options.screenshotConfig ||\n      (Cypress.env(\"pluginVisualRegressionScreenshotConfig\") as\n        | Partial<Cypress.ScreenshotDefaultsOptions>\n        | undefined) ||\n      {};\n\n    return cy\n      .then(() =>\n        cy.task(\n          TASK.getScreenshotPath,\n          {\n            title,\n            imagesDir,\n            specPath: Cypress.spec.relative,\n          },\n          { log: false }\n        )\n      )\n      .then((screenshotPath) => {\n        let imgPath: string;\n        return (subject ? cy.wrap(subject) : cy)\n          .screenshot(screenshotPath as string, {\n            ...screenshotConfig,\n            onAfterScreenshot(el, props) {\n              imgPath = props.path;\n              screenshotConfig.onAfterScreenshot?.(el, props);\n            },\n            log: false,\n          })\n          .then(() => imgPath);\n      })\n      .then((imgPath) =>\n        cy\n          .task(\n            TASK.compareImages,\n            {\n              imgNew: imgPath,\n              imgOld: imgPath.replace(FILE_SUFFIX.actual, \"\"),\n              updateImages,\n              maxDiffThreshold,\n              diffConfig,\n            },\n            { log: false }\n          )\n          .then((res) => ({\n            res: res as null | {\n              error?: boolean;\n              message?: string;\n              imgDiff?: number;\n              maxDiffThreshold?: number;\n            },\n            imgPath,\n          }))\n      )\n      .then(({ res, imgPath }) => {\n        const log = Cypress.log({\n          name: \"log\",\n          displayName: \"Match image\",\n          $el: subject,\n        });\n\n        if (!res) {\n          log.set(\"message\", \"Unexpected error!\");\n          const err = new Error(\"Unexpected error!\");\n          // only way to throw & log the message properly in Cypress\n          // https://github.com/cypress-io/cypress/blob/5f94cad3cb4126e0567290b957050c33e3a78e3c/packages/driver/src/cypress/error_utils.ts#L214-L216\n          (err as unknown as { onFail: (e: Error) => void }).onFail = (\n            err: Error\n          ) => log.error(err);\n          throw err;\n        }\n\n        if (res.error) {\n          log.set(\n            \"message\",\n            `${res.message}\\n[See comparison](${LINK_PREFIX}${btoa(\n              JSON.stringify({ title, imgPath })\n            )})`\n          );\n          log.set(\"consoleProps\", () => res);\n          const err = new Error(res.message);\n          // only way to throw & log the message properly in Cypress\n          // https://github.com/cypress-io/cypress/blob/5f94cad3cb4126e0567290b957050c33e3a78e3c/packages/driver/src/cypress/error_utils.ts#L214-L216\n          (err as unknown as { onFail: (e: Error) => void }).onFail = (\n            err: Error\n          ) => log.error(err);\n          throw err;\n        } else {\n          log.set(\"message\", res.message);\n        }\n      });\n  }\n);\n","import \"./commands\";\nimport { FILE_SUFFIX, LINK_PREFIX, OVERLAY_CLASS, TASK } from \"./constants\";\n\nfunction queueClear() {\n  (cy as unknown as { queue: { clear: () => void } }).queue.clear();\n  (cy as unknown as { state: (k: string, value: unknown) => void }).state(\n    \"index\",\n    0\n  );\n}\n\nfunction queueRun() {\n  // needed to run a task outside of the test processing flow\n  (cy as unknown as { queue: { run: () => void } }).queue.run();\n}\n\nfunction generateOverlayTemplate(\n  title: string,\n  imgNewBase64: string,\n  imgOldBase64: string,\n  imgDiffBase64: string,\n  wasImageNotUpdatedYet: boolean\n) {\n  return `<div class=\"${OVERLAY_CLASS} runner\" style=\"position:fixed;z-index:10;top:0;bottom:0;left:0;right:0\">\n  <header style=\"position:static\">\n  <nav style=\"display:flex;width:100%;align-items:center;justify-content:space-between;padding:10px 15px;\">\n    <h2>${title} - screenshot diff</h2>\n    <form>\n      ${\n        wasImageNotUpdatedYet\n          ? `<button type=\"submit\"><i class=\"fa fa-check\"></i> Update screenshot</button>`\n          : \"Image was already updated, rerun test to see new comparison\"\n      }\n      <button type=\"button\" data-type=\"close\"><i class=\"fa fa-times\"></i> Close</button>\n    <form>\n  </nav>\n  </header>\n  <div style=\"margin:15px;display:flex;justify-content:space-evenly;align-items: flex-end\">\n    <div\n      style=\"position:relative;background:#fff;border:solid 15px #fff\"\n      onmouseover=\"this.querySelector('div').style.opacity=0,this.querySelector('img').style.opacity=1\"\n      onmouseleave=\"this.querySelector('div').style.opacity=1,this.querySelector('img').style.opacity=0\"\n    >\n      <h3>New screenshot:</h3>\n      <img style=\"min-width:300px;width:100%;opacity:0\" src=\"data:image/png;base64,${imgNewBase64}\" />\n      <div style=\"position:absolute;top:0;left:0;background:#fff\">\n        <h3>Old screenshot (hover over to see the new one):</h3>\n        <img style=\"min-width:300px;width:100%\" src=\"data:image/png;base64,${imgOldBase64}\" />\n      </div>\n    </div>\n    <div style=\"background:#fff;border:solid 15px #fff\">\n      <h3>Diff between new and old screenshot</h3>\n      <img style=\"min-width:300px;width:100%\" src=\"data:image/png;base64,${imgDiffBase64}\" />\n      </div>\n    </div>\n  </div>`;\n}\n\nfunction cachedReadFile(\n  imageCache: Record<string, string>,\n  path: string,\n  encoding: Cypress.Encodings\n): Cypress.Chainable<string> {\n  if (imageCache[path])\n    return Cypress.Promise.resolve(\n      imageCache[path]\n    ) as unknown as Cypress.Chainable<string>;\n\n  return cy\n    .readFile(path, encoding, { log: false })\n    .then((file) => (imageCache[path] = file));\n}\n\nbefore(() => {\n  if (!top) return null;\n  Cypress.$(`.${OVERLAY_CLASS}`, top.document.body).remove();\n});\n\nafter(() => {\n  const imageCache: Record<string, string> = {};\n\n  if (!top) return null;\n\n  Cypress.$(top.document.body).on(\n    \"click\",\n    `a[href^=\"${LINK_PREFIX}\"]`,\n    function (e) {\n      e.preventDefault();\n      if (!top) return false;\n\n      const { title, imgPath } = JSON.parse(\n        atob(e.currentTarget.getAttribute(\"href\").substring(LINK_PREFIX.length))\n      );\n      queueClear();\n\n      cachedReadFile(imageCache, imgPath, \"base64\")\n        .then((imgNew) =>\n          cachedReadFile(\n            imageCache,\n            imgPath.replace(FILE_SUFFIX.actual, \"\"),\n            \"base64\"\n          ).then((imgOld) =>\n            cachedReadFile(\n              imageCache,\n              imgPath.replace(FILE_SUFFIX.actual, FILE_SUFFIX.diff),\n              \"base64\"\n            ).then((imgDiff) =>\n              cy\n                .task(TASK.doesFileExist, { path: imgPath }, { log: false })\n                .then(\n                  (wasImageNotUpdatedYet) =>\n                    [\n                      imgNew,\n                      imgOld,\n                      imgDiff,\n                      wasImageNotUpdatedYet as boolean,\n                    ] as const\n                )\n            )\n          )\n        )\n        .then(\n          ([\n            imgNewBase64,\n            imgOldBase64,\n            imgDiffBase64,\n            wasImageNotUpdatedYet,\n          ]) => {\n            if (!top) return false;\n            queueClear();\n\n            Cypress.$(\n              generateOverlayTemplate(\n                title,\n                imgNewBase64,\n                imgOldBase64,\n                imgDiffBase64,\n                wasImageNotUpdatedYet\n              )\n            ).appendTo(top.document.body);\n\n            const wrapper = Cypress.$(`.${OVERLAY_CLASS}`, top.document.body);\n            wrapper.on(\"click\", 'button[data-type=\"close\"]', function () {\n              wrapper.remove();\n            });\n\n            wrapper.on(\"submit\", \"form\", function (e) {\n              e.preventDefault();\n\n              cy.task(TASK.approveImage, { img: imgPath }).then(() =>\n                wrapper.remove()\n              );\n\n              queueRun();\n            });\n          }\n        );\n\n      queueRun();\n\n      return false;\n    }\n  );\n});\n"],"names":["FILE_SUFFIX","PLUGIN_NAME","LINK_PREFIX","OVERLAY_CLASS","TASK","getScreenshotPath","compareImages","approveImage","doesFileExist","nameCacheCounter","queueClear","cy","queue","clear","state","queueRun","run","cachedReadFile","imageCache","path","encoding","Cypress","Promise","resolve","readFile","log","then","file","Commands","add","prevSubject","subject","options","title","currentTest","titlePath","join","updateImages","env","imagesDir","maxDiffThreshold","diffConfig","screenshotConfig","task","specPath","spec","relative","screenshotPath","imgPath","wrap","screenshot","onAfterScreenshot","el","props","imgNew","imgOld","replace","actual","res","name","displayName","$el","set","err","Error","onFail","error","message","btoa","JSON","stringify","before","top","$","document","body","remove","after","on","e","preventDefault","parse","atob","currentTarget","getAttribute","substring","length","diff","imgDiff","wasImageNotUpdatedYet","imgNewBase64","imgOldBase64","imgDiffBase64","generateOverlayTemplate","appendTo","wrapper","img"],"mappings":"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"}